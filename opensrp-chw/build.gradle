buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
        jcenter()
    }
    dependencies {
        classpath 'org.apache.commons:commons-lang3:3.10'
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
    }
}

def githubProperties = new Properties()
if (rootProject.file("github.properties").exists()) {
    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
}
allprojects {
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/d-tree-org/opensrp-client-chw-core")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/issyzac/kujaku")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/d-tree-org/opensrp-client-native-form")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            url 'https://api.mapbox.com/downloads/v2/releases/maven'
            authentication {
                basic(BasicAuthentication)
            }
            Properties lProperties = new Properties()
            lProperties.load(project.rootProject.file("local.properties").newDataInputStream())
            credentials {
                // Do not change the username below.
                // This should always be `mapbox` (not your username).
                username = "mapbox"
                // Use the secret token you stored in gradle.properties as the password
                password = lProperties['mapbox.repo.token'] ?: ""
            }
        }
        maven { url 'https://maven.fabric.io/public' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://nexus.pentaho.org/content/groups/omni/' }
    }
    project.configurations.all {
        resolutionStrategy {
            force 'androidx.work:work-runtime:2.7.0'
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "jacoco.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

jacoco {
    toolVersion = "0.8.5"
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Instead, use the bundle block to control which types of configuration APKs
    // you want your app bundle to support.
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }

    defaultConfig {
        applicationId "org.smartregister.chw"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "0.2.0"
        multiDexEnabled true
        resConfigs "en", "sw"
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "false"
        buildConfigField "String", "THINKMD_BASE_URL", '"https://app.africa.thinkmd.tech"'
        buildConfigField "String", "THINKMD_END_POINT", '"/#/start"'
        buildConfigField "int", "MAX_CONNECTION_TIMEOUT", '1'
        buildConfigField "int", "MAX_READ_TIMEOUT", '1'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

        if (project.rootProject.file("local.properties").exists()) {

            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())

            if (properties != null && properties.containsKey("oauth.client.id")) {


                buildConfigField "String", "OAUTH_CLIENT_ID", properties["oauth.client.id"]
                buildConfigField "String", "OAUTH_CLIENT_ID_PROD", properties["oauth.client.id.prod"]

            } else {
                project.logger.error("oauth.client.id variable is not set in your local.properties")
                buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
            }


            if (properties != null && properties.containsKey("oauth.client.secret")) {

                buildConfigField "String", "OAUTH_CLIENT_SECRET", properties["oauth.client.secret"]
                buildConfigField "String", "OAUTH_CLIENT_SECRET_PROD", properties["oauth.client.secret.prod"]

            } else {
                project.logger.error("oauth.client.secret variable is not set in your local.properties")
                buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
            }

            if (properties != null &&
                    properties.containsKey("mapbox.sdk.token")) {
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
            } else {
                println("Mapbox key config variables is not set in your local.properties")
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }

        } else {
            println("local.properties does not exist")
            buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
            buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    buildTypes {

        release {
            //debuggable true // Useful when debugging release builds
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '500'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '500'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '120'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "int", "SCHEDULE_SERVICE_MINUTES", '720'
            buildConfigField "int", "STOCK_USAGE_REPORT_MINUTES", '1440'
            buildConfigField "boolean", "USE_UNIFIED_REFERRAL_APPROACH", "true"
            buildConfigField "boolean", "BUILD_FOR_BORESHA_AFYA_SOUTH", "false"
        }

        debug {
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '30'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '15'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '120'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "int", "SCHEDULE_SERVICE_MINUTES", '360'
            buildConfigField "int", "STOCK_USAGE_REPORT_MINUTES", '1440'
            buildConfigField "boolean", "USE_UNIFIED_REFERRAL_APPROACH", "true"
            buildConfigField "boolean", "BUILD_FOR_BORESHA_AFYA_SOUTH", "false"
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/INDEX.LIST'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '28'
            jvmArgs '-noverify'
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.appcompat:appcompat:1.0.2'
            force 'com.google.android.material:material:1.0.0'
        }
    }

    flavorDimensions 'baseDimension'
    productFlavors {
        kk {
            getIsDefault().set(true)
            dimension = 'baseDimension'
            applicationIdSuffix ".kk"
            versionCode 37
            versionName "2.1.3"
            resConfigs "en", "sw"
            buildConfigField "String", 'opensrp_url', '"https://kizazi-kijacho.smartregister.org/opensrp/"'
            buildConfigField "String", 'guidebooks_url', '"https://opensrp.s3.amazonaws.com/media/chad/"'
            buildConfigField "String", 'opensrp_url_debug', '"https://opensrp-proto.d-tree.org/opensrp/"'
            buildConfigField "String", 'opensrp_url_production', '"https://kizazi-kijacho.smartregister.org/opensrp/"'
            buildConfigField "String[]", "LOCATION_HIERACHY", '{"Country" , "Province" , "Health District","Health Facility","Village","Clinic" , "CHSS" , "CHA"}'
            buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS", '{"Health District","Health Facility","Village"}'
            buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS_DEBUG", '{"Clinic" , "CHSS" , "CHA"}'
            buildConfigField "String", 'DEFAULT_LOCATION', '"Village"'
            buildConfigField "String", 'DEFAULT_LOCATION_DEBUG', '"CHA"'
            buildConfigField "int", "DATABASE_VERSION", '14'
            buildConfigField "int", "MAX_CONNECTION_TIMEOUT", '5'
            buildConfigField "int", "MAX_READ_TIMEOUT", '5'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {

    implementation('org.smartregister:opensrp-client-chw-core:2.1.3-SNAPSHOT-KK-17@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        exclude group: 'androidx.appcompat', module: 'appcompat'
        exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'com.google.android.gms', module: 'play-services-measurement-base'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-chw-anc'
        exclude group: 'io.ona.kujaku', module: 'library'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'com.google.android.material', module: 'material'
    }

    implementation('org.smartregister:opensrp-client-native-form:2.1.16-SNAPSHOT-KK-3') {
        transitive = true
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'com.google.android.material', module: 'material'
    }

    implementation('org.smartregister:opensrp-client-chw-anc:2.1.0-DTREE-SNAPSHOT') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'org.smartregister', module: 'opensrp-client-configurable-views'
        exclude group: 'org.smartregister', module: 'opensrp-client-immunization'
        exclude group: 'org.smartregister', module: 'opensrp-client-family'
        exclude group: 'id.zelory', module: 'compressor'
        exclude group: 'com.google.android.material', module: 'material'
    }

    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.7.1@aar'

    implementation('io.ona.kujaku:library:v0.10.0-ISSY-SNAPSHOT') {
        transitive = true
        exclude group: 'com.android.volley', module: 'volley'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.google.android.material', module: 'material'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        exclude group: 'androidx.appcompat', module: 'appcompat'
        exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
        exclude group: 'com.google.android.material', module: 'material'
    }

    //Do not upgrade to 1.1.0 due to compatibility issues
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //Do not upgrade to 1.1.0 due to compatibility issues
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'com.android.support:multidex:1.0.3'
    //Do not upgrade to 24.jre-1 due to compatibility issues
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.google.firebase:firebase-analytics:20.0.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'org.mockito:mockito-android:3.0.0'

    implementation("androidx.work:work-runtime:2.8.0")

    //For viewing PDFs in the app
    implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'

    implementation 'com.github.lecho:hellocharts-android:1.5.8@aar'

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'

    api('org.smartregister:opensrp-client-core:6.0.0-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
        exclude group: 'com.google.android.material', module: 'material'
    }

    testImplementation "org.koin:koin-test:2.0.1"
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation 'androidx.test:core:1.3.0'
}

def flavors = android.productFlavors.collect { flavor -> flavor.name }
if (!flavors) flavors.add('')

def testDependencies = []
flavors.each { productFlavorName ->
    testDependencies.add("test${productFlavorName.capitalize()}DebugUnitTest")
    testDependencies.add("create${productFlavorName.capitalize()}DebugCoverageReport")
}

// task jacocoTestReport(type: JacocoReport, dependsOn: testDependencies.take(2)) {
task jacocoTestReport(type: JacocoReport, dependsOn: [
        'testTogoDebugUnitTest', 'createTogoDebugCoverageReport',
        'testBaDebugUnitTest', 'createBaDebugCoverageReport'
]) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/baDebug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testBaDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    maxHeapSize = "3g"
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}

apply plugin: 'com.google.gms.google-services'